import { makeExecutableSchema } from 'graphql-tools';
import request from 'request';

const typeDefs = `
	type Query {
		incident(type: IncidentType!, pageLink: String, description: String): Incident
	}

	enum IncidentType{
		USERINPUT
		IOGPHIPO
		IOGPFATAL
	}

	type Incident{
		id: ID!
		description: String
		severity: Severity
		cost: Float
		people: People
		location: Location
		date: String
	}

	type People{
		id: ID!
		name: String
	}

	type Location{
		id: ID!
		region: String
		country: String
	}

	type Severity{
		id: ID!
		classification_categories: [String]
		naive_bayes_classification: String
		naive_bayes_classification_confidence: Float
		naive_bayes_optimized_classification: String
		naive_bayes_optimized_classification_confidence: Float
		naive_bayes_optimized_classification_all_results: [Float]
	}
`;


const resolvers = {
  Query: {
    incident: (root, args, context) => {
      return classifyIncident(args.pageLink, args.type, args.description, context.secrets.EC2).then(value =>  {
       return  {id: "MaanaUID",
        	description:value.incident_description,
        	severity: {
        		id: "MaanaUID",
        		classification_categories: value.classification_categories,
        		naive_bayes_classification: value.naive_bayes_classification,
        		naive_bayes_classification_confidence: value.naive_bayes_classification_confidence,
        		naive_bayes_optimized_classification: value.naive_bayes_optimized_classification,
        		naive_bayes_optimized_classification_confidence: value.naive_bayes_optimized_classification_confidence,
        		naive_bayes_optimized_classification_all_results: value.naive_bayes_optimized_classification_all_results
        	},
        	location: {
        		id: "MaanaUID",
        		region: "Add location NER algorithm"
        	}
      	}
      });
    },
  },
};


function classifyIncident(pageLink, type, description, EC2) {  	
  var baseUrl = "http://";
  baseUrl = baseUrl.concat(EC2)
  var params = '';
  
  if (String(type) === "IOGPHIPO"){
    baseUrl = baseUrl.concat("/classifyIOGPHiPoIncident/");
    params = pageLink;
  }
  else if(String(type) === "IOGPFATAL"){
    baseUrl = baseUrl.concat("/classifyIOGPFatalIncident/");
    params = pageLink;
  }
  else{
    baseUrl = baseUrl.concat("/classifyTextInput/");    
    params = description;
  }
    

  return new Promise((resolve, reject) => {
    request(`${baseUrl}${params}`, (error, response, body) => {
      if (error) {
        reject(error);
      }
      	const data = JSON.parse(body);
      	const classification_categories = data.prediction_categories;
      	const naive_bayes_classification = data.NB_prediction.prediction;
      	const naive_bayes_classification_confidence = data.NB_prediction.prediction_confidence;
      	const naive_bayes_optimized_classification = data.NB_optimized_prediction.prediction[0];
      	const naive_bayes_optimized_classification_confidence = data.NB_optimized_prediction.prediction_confidence;
        const incident_description = data.incident_description;
      	const naive_bayes_optimized_classification_all_results = data.NB_optimized_prediction.all_scores;
      resolve({
        classification_categories,
        naive_bayes_classification,
        naive_bayes_classification_confidence,
        naive_bayes_optimized_classification,
        naive_bayes_optimized_classification_confidence,
        incident_description,
        naive_bayes_optimized_classification_all_results
      });
    });
  });
}




export const schema = makeExecutableSchema({
  typeDefs,
  resolvers
});
export function context(headers, secrets) {
  return {
    headers,
    secrets
  };
};
